1- to reap the benifits from using inheritance you must not only understand
   how to write inheritance code but also when it makes sense to do so.

2- the total number of messages that an object can respond to is :
   * Those it emplements
   * Those implemented in all objects above it in the hierarchy.
   * Those implemented in any modules added to it.
   * Those implemented in any modules added to any objects above it in the
     heirarchy.

3- if a module sends a message it must provide an implementation for that
   method, even if that message merely raises and error indicating that users
   of the module must implement the method.

4- the inherticance represents 'is-a' relashtionship and modules respresents
   'behaves-like-a' relationship.

5- when different classes or objects play the same role, then they can
   share that rule through  modules.

6- see the 'Looking Up Methods' section in this chapter to understand
   how methods gets looked up when adding module to the class in ruby.

7- two anti patterns that indicate that your code might benefit from
   inheritance:

    * First, an object that uses a variable with a name like type or category to
	determine what message to send to self contains two highly related but
        slightly different types. This is a maintenance nightmare; the code
        must change every time a new type is added. Code like this can be
        rearranged to use classical inheritance by putting the common code
        in an abstract superclass and creating subclasses for the different
        types. This rearrangement allows you to create new subtypes by adding
        new subclasses.  These subclasses extend the hierarchy without
        changing the existing code.

    * Second, when a sending object checks the class of a receiving object
	 to determine what message to send, you have overlooked
	 a duck type. This is another maintenance nightmare; the
	 code must change every time you introduce a new class
	 of receiver. In this situation all of the possible receiving
	 objects play a common role.  This role should be
	 codified as a duck type and receivers should implement the
	 duck type’s interface. Once they do, the original object can
	 send one single message to every receiver, confident that because
	 each receiver plays the role it will understand the common
	 message.  In addition to sharing an interface, duck types
	 might also share behavior. When they do, place the shared
	 code in a module and include that module in each
	 class or object that plays the role.

8- All of the code in an abstract superclass should apply
	 to every class that inherits it.  Superclasses should not
	 contain code that applies to some, but not all, subclasses.
	  This restriction also applies to modules: the code in
	 a module must apply to all who use it.
	 Faulty abstractions cause inheriting objects to contain incorrect
	 behavior; attempts
	 to work around this erroneous behavior will cause your code
	 to decay. When interacting with these awkward objects, programmers are
	 forced to know their quirks and into dependencies that are
	 better avoided.  Subclasses that override a method to raise
	 an exception like “does not implement” are a symptom of
	 this problem. While it is true that expediency pays for
	 all and that it is sometimes most cost effective to
	 arrange code in just this way, you should be reluc-
	 tant to do so. When subclasses override a method to
	 declare that they do not do that thing they come
	 perilously close to declaring that they are not that thing.
	 Nothing good can come of this.  If you cannot
	 correctly identify the abstraction there may not be one, and
	 if no common abstraction exists then inheritance is not the
	 solution to your design problem.

9- Honor the contract :

	Subclasses agree to a contract; they promise to be substitutable
	 for their superclasses.  Substitutability is possible only when objects
	 behave as expected and subclasses are expected to conform to
	 their superclass’s interface. They must respond to every message in
	 that interface, taking the same kinds of inputs and returning
	 the same kinds of outputs. They are not permitted to
	 do anything that forces others to check their type in
	 order to know how to treat them or what to
	 expect of them.  Where superclasses place restrictions on input
	 arguments and return values, sub- classes can indulge in a
	 slight bit of freedom without violating their contract.  Subclasses
	 may accept input parameters that have broader restrictions and may
	 return results that have narrower restrictions,
	 all while remaining perfectly substitutable for their superclasses.
        Subclasses that fail to honor their contract are difficult to use.
        They’re “special” and cannot be freely substituted for their
        superclasses. These subclasses are declaring that they are not
        really a kind-of their superclass and cast doubt on the
        correctness of the entire hierarchy.
10- Liskov Substitution Principle (LSP)

	When you honor the contract, you are following
	the Liskov Substitution Principle, which is named for
	its creator, Barbara Liskov, and supplies the “L”
	in the SOLID design principles.  Her principle
	states: Let q(x) be a property provable about
	objects x of type T. Then q(y) should
	be true for objects y of type S
	where S is a subtype of T.
	Mathematicians will instantly comprehend this statement;
	everyone else should understand it to say that in order
	for a type system to be sane, sub-
	types must be substitutable for their supertypes.
	Following this principle creates applications where a subclass
	can be used anywhere its superclass would do,
	and where objects that include modules can be
	trusted to interchangeably play the module’s role.

11- Use the Template Method Pattern

	The fundamental coding technique for
	creating inheritable code is the template method pattern.
	This pattern is what allows you to separate
	the abstract from the con- crete. The abstract
	code defines the algorithms and the concrete inheritors
	of that ab- straction contribute specializations by overriding
	these template methods.The template methods represent the parts
	of the algorithm that vary and creating them
	forces you to make explicit decisions about what
	varies and what does not.

12- Preemptively Decouple Classes

	Avoid writing code that requires its inheritors to
	send super ; instead use hook mes- sages
	to allow subclasses to participate while absolving them
	of responsibility for knowing the abstract algorithm. Inheritance,
	by its very nature, adds powerful dependencies on
	the structure and arrangement of code. Writing code
	that requires sub-classes to send super adds an
	additional dependency; avoid this if you can.

13- Create Shallow Hierarchies

	The limitations of hook methods are just one
	of the many reasons to create shallow hierarchies.
	 Every hierarchy can be thought of a pyramid
	that has both depth and breadth. An object’s
	depth is the number of superclasses between it
	and the top. Its breadth is the number
	of its direct subclasses. A hierarchy’s shape is
	defined by its overall breadth and depth and
	it is this shape that determines ease of
	use, maintenance, and exten- sion

	Shallow, narrow hierarchies are easy to understand. Shallow,
	wide hierarchies are slightly more complicated. Deep, narrow
	hierarchies are a bit more challenging and unfortunately
	have a natural tendency to get wider, strictly
	as a side effect of their depth. Deep,
	wide hierarchies are difficult to understand, costly to
	maintain, and should be avoided.

	The problem with deep hierarchies is that they
	define a very long search path for message
	resolution and provide numerous opportunities for objects in
	that path to add behavior as the message
	passes by. Because objects depend on everything above
	them, a deep hierarchy has a large set
	of built-in dependencies, each of which might someday change.

	Another problem with deep hierarchies is that programmers
	tend to be familiar with just the classes
	at their tops and bottoms; that is, they
	tend to understand only the behavior implemented at
	the boundaries of the search path. The classes
	in the middle get short shrift. Changes to
	these vaguely understood middle classes stand a greater
	chance of introducing errors.

14- Summary

	When objects that play a common role need
	to share behavior, they do so via a
	Ruby module. The code defined in a module
	can be added to any object, be it
	an instance of a class, a class itself, or another module.


	When a class includes a module, the methods
	in that module get put into the same
	lookup path as methods acquired via inheritance. Because
	module methods and inher- ited methods interleave in
	the lookup path, the coding techniques for modules
	mirror those of inheritance. Modules, therefore, should use
	the template method pattern to invite those that
	include them to supply specializations, and should implement
	hook methods to avoid forcing includer s to
	send super (and thus know the algorithm).

	When an object acquires behavior that was defined
	elsewhere, regardless of whether this elsewhere is a
	superclass or an included module, the acquiring object
	makes a commitment to honoring an implied contract.
	This contract is defined by the Liskov Substitution
	Principle, which in mathematical terms says that a
	subtype should be substitutable for its supertype,
        and in Ruby terms this means that an object should act like
        what it claims to be.
