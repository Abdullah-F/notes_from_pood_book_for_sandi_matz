1- In composition, the larger object is connected
	to its parts via a has-a relationship

2- Aggregation: A Special Kind of Composition

	You already know the term delegation; delegation is
	when one object receives a message and merely
	forwards it to another. Delegation creates dependen- cies;
	the receiving object must recognize the message and
	know where to send it.

	Composition often involves delegation but the term means
	something more. A composed object is made up
	of parts with which it expects to interact via well-defined interfaces.

	Composition describes a has-a relationship. Meals have appetizers,
	uni- versities have departments, bicycles have parts. Meals,
	universities, and bicy- cles are composed objects. Appetizers,
	departments, and parts are roles. The composed object
	depends on the interface of the role. 
	Because meals interact with appetizers using an interface,
	new objects that wish to act as appetizers
	need only implement this interface.  Unanticipated appetizers
	fit seamlessly and interchangeably into existing meals.

	The term composition can be a bit confusing
	because it gets used for two slightly different
	concepts. The definition above is for the broadest
	use of the term. In most cases when
	you see composition it will indicate nothing more
	than this general has-a relationship between two objects.

	However, as formally defined it means something a
	bit more specific; it indicates a has-a relationship
	where the contained object has no life inde-
	pendent of its container. When used in this
	stricter sense you know not only that meals
	have appetizers, but also that once the meal
	is eaten the appetizer is also gone.

	This leaves a gap in the definition that
	is filled by the term aggregation.  Aggregation
	is exactly like composition except that the contained
	object has an independent life. Universities have departments,
	which in turn have pro- fessors. If your
	application manages many universities and knows about thousands
	of professors, it’s quite reasonable to expect that
	although a depart- ment completely disappears when its
	university goes defunct, its professors continue to exist.  

	The university–department relationship is one of composition (in
	its strictest sense) and the department–professor relationship is
	aggregation.  

	Destroying a department does not destroy its professors;
	they have an existence and life of their
	own.  


	This distinction between composition and aggregation may have
	little practical effect on your code. Now that
	you are familiar with both terms you
	can use composition to refer to both kinds
	of relationships and be more explicit only if
	the need arises.

4- Deciding Between Inheritance and Composition

	Remember that classical inheritance is a code arrangement
	technique. Behavior is dis- persed among objects and
	these objects are organized into class relationships such
	that automatic delegation of messages invokes the correct
	behavior. Think of it this way: For the
	cost of arranging objects in a hierarchy, you
	get message delegation for free.  

	Composition is an alternative that reverses these costs
	and benefits. In composi- tion, the relationship between
	objects is not codified in the class hierarchy;
	instead objects stand alone and as a result
	must explicitly know about and delegate messages to
	one another. Composition allows objects to have structural
	independence, but at the cost of explicit message
	delegation.

	Now that you’ve seen examples of inheritance and
	composition you can begin to think about when
	to use them. The general rule is that,
	faced with a problem that composition can solve,
	you should be biased towards doing so. If
	you cannot explicitly defend inheritance as a better
	solution, use composition. Composition contains far fewer built-in
	dependencies than inheritance; it is very often the
	best choice.

	Inheritance is a better solution when its use
	provides high rewards for low risk.  This
	section examines the costs and benefits of inheritance
	versus composition and provides guidelines for choosing the
	best relationship.      

5- Benefits of Inheritance

	Chapter 2, Designing Classes with a Single Responsibility,
	outlined four goals for code: it should be
	transparent, reasonable, usable, and exemplary. Inheritance, when correctly
	applied, excels at the second, third, and fourth
	goals.

	Methods defined near the top of inheritance hierarchies
	have widespread influ- ence because the height of
	the hierarchy acts as a lever that multiplies
	their effects.  Changes made to these methods
	ripple down the inheritance tree. Correctly modeled hierarchies
	are thus extremely reasonable; big changes in behavior
	can be achieved via small changes in code.

	Use of inheritance results in code that can
	be described as open–closed; hierarchies are open for
	extension while remaining closed for modification. Adding a
	new sub- class to an existing hierarchy requires
	no changes to existing code. Hierarchies are thus
	usable; you can easily create new subclasses to
	accommodate new variants.  

	Correctly written hierarchies are easy to extend. The
	hierarchy embodies the abstraction and every new subclass
	plugs in a few concrete differences. The existing
	pattern is easy to follow and replicating it
	will be the natural choice of any program-
	mer charged with creating new subclasses. Hierarchies are
	therefore exemplary; by their nature they provide guidance
	for writing the code to extend them.

	You need look no farther than the source
	of object-oriented languages themselves to see the value
	of organizing code using inheritance. In Ruby, the
	Numeric class provides an excellent example. Integer and
	Float are modeled as subclasses of Numeric ;
	this is-a relationship is exactly right. Integers and
	floats are fundamentally numbers. Allowing these two classes
	to share a common abstraction is the most
	parsimonious way to organize code.

6- Costs of Inheritance

	Concerns about the use of inheritance fall into
	two different areas. The first fear is that
	you might be fooled into choosing inheritance to
	solve the wrong kind of prob- lem. If
	you make this mistake a day will come
	when you need to add behavior but find
	there’s no easy way do so. Because the
	model is incorrect, the new behavior won’t fit;
	in this case you’ll be forced to duplicate
	or restructure code.

	Second, even when inheritance makes sense for the
	problem, you might be writ- ing code that
	will be used by others for purposes you
	did not anticipate. These other programmers want the
	behavior you have created but may not be
	able to tolerate the dependencies that inheritance demands.

	The previous section on the benefits of inheritance
	was careful to qualify its assertions as applying
	only to a “correctly modeled hierarchy.” Imagine reasonable,
	usable and exemplary as two-sided coins. The benefit
	side represents the wonderful gains that inheritance provides.
	If you apply inheritance to a problem for
	which it is not suited, you effectively flip
	these coins over and encounter a parallel detriment.

	The flip side of the reasonable coin is
	the very high cost of making changes near
	the top of an incorrectly modeled hierarchy. In
	this case, the leveraging effect works to your
	disadvantage; small changes break everything.

	The opposing side of the usable coin is
	the impossibility of adding behavior when new subclasses
	represent a mixture of types. The Bicycle hierarchy
	in Chapter 6 failed when the need for
	recumbent mountain bikes appeared. This hierarchy already contains
	subclasses for MountainBike and RecumbentBike ; combining the
	qualities of these two classes into a single
	object is not possible in the hierarchy as
	it currently exists. You cannot reuse existing behavior
	without changing it.

	The other side of the exemplary coin is
	the chaos that ensues when novice pro- grammers
	attempt to extend incorrectly modeled hierarchies. These inadequate
	hierarchies should not be extended, they need to
	be refactored, but novices do not have the
	skills to do so. Novices are forced to
	duplicate existing code or to add dependencies on
	class names, both of which serve to exacerbate
	existing design problems.

	Inheritance, therefore, is a place where the question
	“What will happen when I’m wrong?” assumes special
	importance. Inheritance by definition comes with a deeply
	embedded set of dependencies. Subclasses depend on the
	methods defined in their superclasses and on the
	automatic delegation of messages to those superclasses. 
	This is classical inheritance’s greatest strength and biggest
	weakness; subclasses are bound, irrevocably and by design,
	to the classes above them in the hierarchy.
	These built-in dependencies amplify the effects of modifications
	made to superclasses.  Enormous, broad-reaching changes of
	behavior can be achieved with very small changes
	in code.

	This is true, for better or for worse,
	whether you come to regret it or not.
	 Finally, your consideration of the use of inheritance
	should be tempered by your expectations about the
	population who will use your code. If you
	are writing code for an in-house application in
	a domain with which you are intimately familiar,
	you may be able to predict the future
	well enough to be confident that your design
	problem is one for which inheritance is a
	cost-effective solution. As you write code for a
	wider audience, your ability to anticipate needs necessarily
	decreases and the suitability of requiring inheritance as
	part of the interface goes down.

	Avoid writing frameworks that require users of your
	code to subclass your objects in order to
	gain your behavior. Their application’s objects may already
	be arranged in a hierarchy; inheriting from your
	framework may not be possible.

7- Benefits of Composition

	When using composition, the natural tendency is to
	create many small objects that con- tain straightforward
	responsibilities that are accessible through clearly defined interfaces.
	 These well-composed objects excel when measured against several
	of Chapter 2’s goals for code.

	These small objects have a single responsibility and
	specify their own behavior.  They are transparent;
	it’s easy to understand the code and it’s
	clear what will happen if it changes. Also,
	the composed object’s independence from the hierarchy means
	that it inherits very little code and so
	is generally immune from suffering side effects as
	a result of changes to classes above it
	in the hierarchy.

	Because composed objects deal with their parts via
	an interface, adding a new kind of part
	is a simple matter of plugging in a
	new object that honors the interface.  From
	the point of view of the composed object,
	adding a new variant of an existing part
	is reasonable and requires no changes to its
	code.

	By their very nature, objects that participate in
	composition are small, structurally independent, and have well-defined
	interfaces. This allows their seamless transition into pluggable,
	interchangeable components. Well-composed objects are therefore easily usable
	in new and unexpected contexts.

	At its best, composition results in applications built
	of simple, pluggable objects that are easy to
	extend and have a high tolerance for change.

8- Costs of Composition

	Composition’s strengths, as with most things in life,
	contribute to its weaknesses.  A composed object
	relies on its many parts. Even if each
	part is small and easily understood, the combined
	operation of the whole may be less than
	obvious. While every individual part may indeed be
	transparent, the whole may not be.

	The benefits of structural independence are gained at
	the cost of automatic mes- sage delegation. The
	composed object must explicitly know which messages to
	delegate and to whom. Identical delegation code may
	be needed by many different objects; composition provides
	no way to share this code.

	As these costs and benefits illustrate, composition is
	excellent at prescribing rules for assembling an object
	made of parts but doesn’t provide as much
	help for the problem of arranging code for
	a collection of parts that are very nearly
	identical.

9- Choosing Relationships


	Classical inheritance (Chapter 6), behavior sharing via modules
	(Chapter 7, Sharing Role Behavior with Modules) and
	composition are each the perfect solution for the
	problem they solve. The trick to lowering your
	application costs is to apply each technique to
	the right problem.

	Some of the grand masters of object-oriented design
	have given advice about using inheritance and composition.

	“Inheritance is specialization.”—Bertrand Meyer, Touch of Class: Learning
	to Program Well with Objects and Contracts

	“Inheritance is best suited to adding functionally to
	existing classes when you will use most of
	the old code and add relatively small amounts
	of new code.” —— Erich Gamma, Richard Helm,
	Ralph Johnson, and John Vlissides, Design Patterns: Elements
	of Reusable Object-Oriented Software

	“Use composition when the behavior is more than
	the sum of its parts.”—para- phrase of Grady
	Booch, Object-Oriented Analysis and Design 

10- Use Inheritance for is-a Relationships

	When you select inheritance over composition you are
	placing a bet that the bene- fits thereby
	accrued will outweigh the costs. Some bets are
	more likely to pay off than others. Small
	sets of real-world objects that fall naturally into
	static, transpar- ently obvious specialization hierarchies are candidates
	to be modeled using classical inheritance.

	Imagine a game where players race bicycles. Players
	assemble their bikes by “buying” parts. One of
	the parts they can buy is a shock.
	The game provides six nearly identical shocks; each
	differs slightly in cost and behavior.

	All of these shocks are, well, shocks. Their
	“shock-ness” is at the core of their iden-
	tity. Shocks exist in no more atomic category.
	Variants of shocks are far more alike than
	they are different. The most accurate and descriptive
	statement that you can make about any one
	of the variants is that it is-a shock.

11- Deciding Between Inheritance and Composition

	Inheritance is perfect for this problem. Shocks can
	be modeled as a shallow narrow hierarchy. The
	hierarchy’s small size makes it understandable, intention revealing,
	and easily extendable. Because these objects meet the
	criteria for successful use of inheritance, the risk
	of being wrong is low, but in the
	unlikely event that you are wrong, the cost
	of changing your mind is also low. You
	can achieve the benefits of inheritance while exposing
	yourself to few of its risks.

	In terms of this Chapter’s example, each different
	shock plays the role of Part . It
	inherits common shock behavior and the Part role
	from its abstract Shock super- class. The PartsFactory
	currently assumes that every part can be represented
	by the Part OpenStruct, but you could easily
	extend the part configuration array to supply the
	class name for a specific shock. Because you
	already think of Part as an interface, it’s
	easy to plug in a new kind of
	part, even if this part uses inheritance to
	get some of its behavior.

	If requirements change such that there is an
	explosion in the kinds of shocks, reassess this
	design decision. Perhaps it still holds, perhaps not.
	If modeling a bevy of new shocks requires
	dramatically expanding the hierarchy, or if the new
	shocks don’t conveniently fit into the existing code,
	reconsider alternatives at that time

12- Use Duck Types for behaves-like-a Relationships

	Some problems require many different objects to play
	a common role. In addition to their core
	responsibilities, objects might play roles like schedulable, preparable,
	printable, or persistable.

	There are two key ways to recognize the
	existence of a role. First, although an object
	plays it, the role is not the object’s
	main responsibility. A bicycle behaves-like-a schedu- lable but
	it is-a bicycle. Second, the need is widespread;
	many otherwise unrelated objects share a desire to
	play the same role.

	The most illuminating way to think about roles
	is from the outside, from the point of
	view of a holder of a role player
	rather than that of a player of a
	role. The holder of a schedulable expects it
	to implement Schedulable ’s interface and to honor
	Schedulable ’s contract. All schedulables are alike in
	that they must meet these expectations.

	Your design task is to recognize that a
	role exists, define the interface of its duck
	type and provide an implementation of that interface
	for every possible player. Some roles consist only
	of their interface, others share common behavior. Define
	the com- mon behavior in a Ruby module
	to allow objects to play the role without
	duplicating the code.

13- Use Composition for has-a Relationships

	Many objects contain numerous parts but are more
	than the sums of those parts.  Bicycles
	have-a Parts , but the bike itself is
	something more. It has behavior that is separate
	from and in addition to the behavior of
	its parts. Given the current require- ments of
	the bicycle example, the most cost-effective way to
	model the Bicycle object is via composition.

	This is-a versus has-a distinction is at the
	core of deciding between inheritance and composition. The
	more parts an object has, the more likely
	it is that it should be modeled with
	composition. The deeper you drill down into individual
	parts, the more likely it is that you’ll
	discover a specific part that has a few
	specialized variants and is thus a reasonable candidate
	for inheritance. For every problem, assess the costs
	and benefits of alternative design techniques and use
	your judgment and experience to make the best
	choice.
